{
  "name": "recursivefunk/good-env",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Good Env",
  "branch": "master",
  "style": {
    "name": "Future",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BannerHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "\"Avenir Next\", Helvetica, sans-serif",
    "heading": {
      "fontWeight": 500,
      "textTransform": "uppercase",
      "letterSpacing": "0.2em"
    },
    "alternativeText": {
      "textTransform": "uppercase",
      "fontWeight": 400,
      "letterSpacing": "0.2em",
      "opacity": 0.75
    },
    "colors": {
      "text": "#333",
      "background": "#fff",
      "primary": "#666",
      "secondary": "#888",
      "highlight": "#1f80ff",
      "muted": "#f6f6f6",
      "border": "#eee"
    },
    "layout": {
      "centered": true,
      "maxWidth": 1024,
      "bannerHeight": "80vh"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://recursivefunk.github.io/good-env/",
          "text": "Home"
        },
        {
          "href": "https://github.com/recursivefunk/good-env",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/good-env",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "good-env",
      "subhead": "⚙   Sensible environment variable parsing for node",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "good-env: ⚙   Sensible environment variable parsing for node",
          "url": "https://recursivefunk.github.io/good-env/"
        },
        {
          "component": "ui/GithubButton",
          "user": "recursivefunk",
          "repo": "good-env"
        }
      ],
      "text": "v1.5.8"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<p><a href=\"https://circleci.com/gh/recursivefunk/good-env\"><img src=\"https://circleci.com/gh/recursivefunk/good-env.png?circle-token=b1d0d5b046161f60cc5816afb82b741db7163344\"></a></p>\n<p><a href=\"http://standardjs.com\"><img src=\"https://cdn.rawgit.com/feross/standard/master/badge.svg\"></a></p>\n<p><code>good-env</code> provides a more intuitive way to interface with environment variables for node apps. Reasoning\nabout raw strings is OK for some things but for non-trivial applications, booleans, integers, floats, lists or even\nthe existence (or non-existence) of environment configurations can play a key role in how an application behaves.</p>\n<pre>$ npm <span class=\"hljs-keyword\">install</span> good-env <span class=\"hljs-comment\">--save</span></pre><p>With normal process.env</p>\n<pre>$ export HOST=localhost\n$ export SECRET=shhh\n$ export FOO=<span class=\"hljs-number\">10</span>\n$ export A_TRUE_VAL=true\n$ export A_FALSE_VAL=false\n$ export LIST=foo,bar,bang\n$ node\n&gt; process<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.FOO</span>\n<span class=\"hljs-string\">&apos;10&apos;</span>\n&gt; process<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.A_TRUE_VAL</span>\n<span class=\"hljs-string\">&apos;true&apos;</span>\n&gt; process<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.A_FALSE_VAL</span>\n<span class=\"hljs-string\">&apos;false&apos;</span>\n&gt; process<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.LIST</span>\n<span class=\"hljs-string\">&apos;foo,bar,bang&apos;</span>\n&gt;</pre><p>Using <code>good-env</code></p>\n<pre><span class=\"hljs-keyword\">const</span> env = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;good-env&apos;</span>)\nenv.getInt(<span class=\"hljs-string\">&apos;FOO&apos;</span>) <span class=\"hljs-comment\">// 10</span>\nenv.getBool(<span class=\"hljs-string\">&apos;A_TRUE_VAL&apos;</span>) <span class=\"hljs-comment\">// true</span>\nenv.getBool(<span class=\"hljs-string\">&apos;A_FALSE_VAL&apos;</span>) <span class=\"hljs-comment\">// false</span></pre><p>Specify defaults</p>\n<pre>env.get(<span class=\"hljs-string\">&apos;NOT_SET&apos;</span>, <span class=\"hljs-string\">&apos;foo&apos;</span>) <span class=\"hljs-comment\">// &apos;foo&apos;</span></pre><p>Batch Gets</p>\n<pre>env.getAll([<span class=\"hljs-string\">&apos;SECRET&apos;</span>, <span class=\"hljs-string\">&apos;HOST&apos;</span>]) <span class=\"hljs-comment\">// [&apos;shhh&apos;, &apos;localhost&apos;]</span>\n\n<span class=\"hljs-comment\">// defaults work here too</span>\nenv.getAll({\n  <span class=\"hljs-attr\">A_SECRET</span>: <span class=\"hljs-string\">&apos;lolz&apos;</span>, <span class=\"hljs-attr\">HOST</span>: <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// null means no default</span>\n}) <span class=\"hljs-comment\">// { A_SECRET: &apos;lolz&apos;, HOST: &apos;localhost&apos; }</span></pre><p>Use the first available environment variable</p>\n<pre><span class=\"hljs-comment\">// old and busted</span>\n<span class=\"hljs-keyword\">const</span> host = process.env.THE_HOST || process.env.HOST <span class=\"hljs-comment\">// &apos;localhost&apos;</span>\n\n<span class=\"hljs-comment\">// new hotness</span>\n<span class=\"hljs-keyword\">const</span> host = env.get([<span class=\"hljs-string\">&apos;THE_HOST&apos;</span>, <span class=\"hljs-string\">&apos;HOST&apos;</span>]) <span class=\"hljs-comment\">// &apos;localhost&apos;</span>\n\n<span class=\"hljs-comment\">// works with defaults</span>\n<span class=\"hljs-keyword\">const</span> host = env.get([<span class=\"hljs-string\">&apos;THE_HOST&apos;</span>, <span class=\"hljs-string\">&apos;A_HOST&apos;</span>], <span class=\"hljs-string\">&apos;localhost&apos;</span>) <span class=\"hljs-comment\">// &apos;localhost&apos;</span></pre><p>Lists</p>\n<pre>env.getList(<span class=\"hljs-string\">&apos;LIST&apos;</span>) <span class=\"hljs-comment\">// [&apos;foo&apos;, &apos;bar&apos;, &apos;bang&apos;]</span>\nenv.getList(<span class=\"hljs-string\">&apos;LIST_NOT_SET&apos;</span>) <span class=\"hljs-comment\">// []</span></pre><p>Integer Lists</p>\n<pre>$ export LIST=<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span></pre><pre>process.env.LIST <span class=\"hljs-comment\">// &apos;1,2,3&apos;</span>\nenv.list(<span class=\"hljs-string\">&apos;LIST&apos;</span>, { <span class=\"hljs-attr\">cast</span>: <span class=\"hljs-string\">&apos;int&apos;</span> }) <span class=\"hljs-comment\">// [1, 2, 3]</span></pre><p>Float Lists</p>\n<pre>$ export LIST=<span class=\"hljs-number\">1.3</span>,<span class=\"hljs-number\">2.5</span>,<span class=\"hljs-number\">3.6</span></pre><pre>process.env.LIST <span class=\"hljs-comment\">// &apos;1.3,2.5,3.6&apos;</span>\nenv.list(<span class=\"hljs-string\">&apos;LIST&apos;</span>, { <span class=\"hljs-attr\">cast</span>: <span class=\"hljs-string\">&apos;float&apos;</span> }) <span class=\"hljs-comment\">// [1.3, 2.2, 3.6]</span></pre><p>Sometimes you just need to know if something exists</p>\n<pre>env.ok(<span class=\"hljs-string\">&apos;NOT_SET&apos;</span>) <span class=\"hljs-comment\">// false</span>\nenv.ok(<span class=\"hljs-string\">&apos;FOO&apos;</span>) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// works with multiple arguments.</span>\n<span class=\"hljs-comment\">// Returns true if ALL keys exist</span>\nenv.ok(<span class=\"hljs-string\">&apos;FOO&apos;</span>, <span class=\"hljs-string\">&apos;BAR&apos;</span>) <span class=\"hljs-comment\">// true</span>\nenv.ok(<span class=\"hljs-string\">&apos;FOO&apos;</span>, <span class=\"hljs-string\">&apos;BAR&apos;</span>, <span class=\"hljs-string\">&apos;NOT_SET&apos;</span>) <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// maybe you want to know which items specifically are not set</span>\nenv.whichNotOk(<span class=\"hljs-string\">&apos;FOO&apos;</span>, <span class=\"hljs-string\">&apos;BAR&apos;</span>, <span class=\"hljs-string\">&apos;NOT_SET&apos;</span>) <span class=\"hljs-comment\">// { NOT_SET: true }</span></pre><h2>Shortcut Methods</h2>\n<pre>env.int() ==&gt; env.getInt()\nenv.bool() ==&gt; env.getBool()\nenv.list() ==&gt; env.getList()</pre>"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/recursivefunk/good-env",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/recursivefunk",
          "text": "recursivefunk"
        }
      ]
    }
  ]
}